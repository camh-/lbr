#!/bin/bash
# vim: set ts=8 sw=2 sts=2 et sta fileencoding=utf-8:
#
# -----------------------------------------------------------------------------
# buildroot layered build script
#
# This script exists to orchestrate the multiple layers of buildroot that are
# used to generate the sdk, bootloader, kernel image and the base
# root filesystem.
#

# =============================================================================

install_prefix='/usr/local'
share_dir="${install_prefix}/share/lbr"

# -----------------------------------------------------------------------------

MAKE=make

declare -A OPTIONS=(
  [global]='hn'
  [linuxup]='go'
)

dryrun=false

OPT_linuxup_git=false
OPT_linuxup_oldconfig=false

# ----------------------------------------------------------------------------
usage() {
  cat <<EOF
Usage: $program_name [options] <target> [target-options] [board] <layer>
Options are:
  -h: Show this help message
  -n: Dry run. Show commands but dont execute them

Layers are defined with a board/<board>/config/<layer> defconfig file.
<board> is optional if CWD is a board dir.
Targets are:
  build:   Build the layer.
  *config: Run make *config on the target, saving the minimal layer defconfig.
  clean:   Remove the output directory for the layer.
  linuxup: Update the linux kernel config to the next version of linux.
    -g:      Add new config files to git before savedefconfig.
  <other>: Other target are passed through to buildroot make.
EOF
[[ -z "$1" ]] || exit "$1"
}

# ----------------------------------------------------------------------------
main() {
  # umask 0022  # fix buildroot bug, temporary
  setup "$@" || exit 1

  if known_target "${target}" ; then
    eval "target_${target}" "${layer}"
  else
    target_unknown "${target}" "${layer}"
  fi

  return 0
}

# ============================================================================
# TARGETS
# These functions define the top level operations of this script. Currently
# build, menuconfig, oldconfig and clean.
# An unknown target is passed onto the buildroot Makefile, so any buildroot
# target can be used

# ----------------------------------------------------------------------------
target_build() {
  if layer_has_build_function "${layer}" ; then
    eval "build_${layer}"
  else
    build
  fi
}

# ----------------------------------------------------------------------------
target_clean() {
  if [[ -n "${LBR_OUTPUT_DIR}" ]] && [[ -n "${layer}" ]]; then
    # shellcheck disable=SC2115
    run rm -rf "${LBR_OUTPUT_DIR}/${layer}"
  fi
}

# ----------------------------------------------------------------------------
# linuxup: Update the linux config to the next available version.
# The layer must have a linux build in the br2 config.
#
# Linux kernel upgrading works like this:
# Look in the current br2 merged defconfig:
# * You must be using a custom git repo (BR2_LINUX_KERNEL_CUSTOM_GIT=y)
# * Get the current version (BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION)
# * Get the latest point release of next minor version from repo
# * Get the custom config file (BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE)
#   + Extract directory from custom config file
#   + Make new sibling directory with major.minor of next kernel version
#   + Copy files from old dir to new dir
# * Do the same for fragment files (BR2_LINUX_KERNEL_CUSTOM_FRAGMENT_FILES)
# * Change br2 merged defconfig to update version, config and fragments.
# * Generate full br2 config from merged defconfig
# * Extract kernel version (linux-patch?)
# * Copy config from config file dir to linux build dir
# * Run oldconfig on the kernel
# * Run make linux-config-demerge
target_linuxup() {
  get_linux_br2_config
  local current_tag current_version next_tag next_version
  current_tag="${BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION}"
  current_version=$(extract_major_minor "${current_tag}")
  next_tag=$(next_linux_version "${BR2_LINUX_KERNEL_CUSTOM_REPO_URL}" "${current_tag}")
  next_version=$(extract_major_minor "${next_tag}")

  kconfig_str_set BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION "${next_tag}" "${lbrconfig}"
  local dotconfig
  dotconfig=$(uplift_linux_configs "${current_version}" "${next_version}")

  local config_target=linux-configure
  if "${OPT_linuxup_oldconfig}"; then
    if [[ -n "${dotconfig}" ]]; then
      config_target=linux-oldconfig
    else
      printf 'No dot config file available for oldconfig\n' >&1
      exit 1
    fi
  fi
  make_target "${config_target}"
  make_target linux-config-demerge
}

# ----------------------------------------------------------------------------
target_unknown() {
  # All buildroot config targets end with config and do not contain a
  # hyphen. Those with a hyphen configure buildroot packages and not
  # buildroot itself so should be treated as a normal target.
  if [[ "$1" =~ ^[^-]*config$ ]]; then
    make_config_target "$1"
  else
    make_target "$1"
  fi
}

# ============================================================================
# BUILD target functions
# These functions build the images for each specific layers and saves them
# in the board saved image directory. The default build for a layer is to
# call `build` and then copy the resultant images to the image output
# directory. The default can be overridden by implementing a build_<layer>
# function.

# ----------------------------------------------------------------------------
# build
# Build a layer into its own output directory, logging the process.
# "make defconfig" is run first to set up the configuration for the layer,
#   with BR2_DEFCONFIG pointing to the layer's config.
# $1: (optional) Target to build. Defaults to "all".
build() {
  # If the defconfig fragment has define BR2_HOST_DIR, we check
  # if it exists and ask for confirmation to proceed if it does.
  # This is to protect against mistakes which might overwrite
  # an external toolchain.
  kconfig_get BR2_HOST_DIR "${lbrconfig}"
  if [[ -n "${BR2_HOST_DIR-}" && -d "${BR2_HOST_DIR}" ]]; then
    echo 'Host dir already exists:' "${BR2_HOST_DIR}"
    read -r -p 'Proceed [y/N]? ' result
    if [[ "${result}" != y && "${result}" != Y ]] ; then
      echo "Aborting"
      exit 0
    fi
  fi

  make_target "${1:-all}" 2>&1 | tee "${log_dir}/${layer}.log"
  return "${PIPESTATUS[0]}"
}

# ----------------------------------------------------------------------------
build_sdk() {
  build sdk
}

# ============================================================================
# CONFIG target functions
# These functions implement the various config targets, currently
# menuconfig and oldconfig

# ----------------------------------------------------------------------------
# make_config_target make_target
# Run "make <make_target>" for <layer> and save the resulting minimal
# defconfig in the configs directory.
# If there is an existing minimal defconfig for <layer>, it will be used as
# the basis of the menuconfig, otherwise a default config is used.
make_config_target() {
  make_target="$1"

  [[ -f "${lbrconfig}" ]] || run touch "${lbrconfig}"

  merge_config
  run ${MAKE} "${make_args[@]}" defconfig "${make_target}" savedefconfig
  demerge_config
}

# ----------------------------------------------------------------------------
# Merge the config fragments listed in the LBR_CONFIG_FRAGMENTS of the
# current layers fragment file and write out a defconfig file to the
# output directory (BR2_DEFCONFIG).
merge_config() {
  kconfig_get LBR_CONFIG_FRAGMENTS "${lbrconfig}"
  local -a fragments
  # shellcheck disable=SC2086
  # We want to split on spaces for LBR_CONFIG_FRAGMENTS
  fragments=($(find_fragments ${LBR_CONFIG_FRAGMENTS} "${layer}"))
  kconfig_merge "${fragments[@]}" > "${BR2_DEFCONFIG}"
}

# ----------------------------------------------------------------------------
# Subtract the fragments listed in the LBR_CONFIG_FRAGMENTS of the current
# layers defconfig file (BR2_DEFCONFIG) from that defconfig file and write
# out a fragment file containing the remaining config options. Whiteout
# entries are written where the current layers defconfig file does not have
# a setting for a variable that is set in one of the fragments. This occurs
# when a defconfig resets a setting to a default value that has been set to
# a non-default value in a fragment. Omitting the setting altogether in the
# fragment would see the setting have the value from the fragment and not
# the default value when the fragments are re-merged.
demerge_config() {
  kconfig_get LBR_CONFIG_FRAGMENTS "${BR2_DEFCONFIG}"
  local -a fragments
  # shellcheck disable=SC2086
  # We want to split on spaces for LBR_CONFIG_FRAGMENTS
  fragments=($(find_fragments ${LBR_CONFIG_FRAGMENTS} "${layer}"))
  # Dont use the last fragment as that is the layer config (lbrconfig).
  # If we demerge that, we remove what we want to remain.
  unset fragments[-1]
  kconfig_demerge "${BR2_DEFCONFIG}" "${fragments[@]}" > "${lbrconfig}"
}

# ----------------------------------------------------------------------------
# find_fragments <fragment>...
# Find each of the given fragments in the fragment search path.
find_fragments() {
  for fragment; do
    find_fragment "${fragment}" || exit 1
  done
}

# ----------------------------------------------------------------------------
# find_fragment <fragment>
# $1: name of fragment file.
# Search for a defconfig fragment named <fragment> starting at the current
# board directory, and following the chain of parents back from the board
# dir. Also look in the project directory and the core directory.
# Output all the fragments matched in reverse order of the above search.
# This orders most-specific fragments after more general fragments so the
# specific ones can override the general ones.
find_fragment() {
  local fragment="$1" dir
  local found=false
  local -a parents cfg_dirs
  get_parents parents "${LBR_BOARD_DIR}"
  cfg_dirs=(
    "${LBR_CORE_DIR}" \
    "${LBR_PROJECT_DIR}" \
    "${parents[@]}" \
    "${LBR_BOARD_DIR}" \
  )
  for dir in "${cfg_dirs[@]}"; do
    local f="${dir}/config/${fragment}"
    if [[ -f "${f}" ]]; then
      printf '%s\n' "${f}"
      found=true
    fi
  done

  if ! "${found}"; then
    printf 'Could not find defconfig fragment: %s\n' "${fragment}" >&2
    return 1
  fi

  return 0
}

# ----------------------------------------------------------------------------
# get_parents <array_name> <board_dir>
# Find all the parent directories of a board directory.
# Parent directories are found by following the "parent" symlink in each
# board dir until there are no more "parent" symlinks. The order is parents
# before children.
# $1: Name of array to put the parent dirs in.
# $2: The board directory to start from.
get_parents() {
  local -n _parents="$1"
  local dir="$2"

  while [[ -d "${dir}/parent" ]]; do
    dir=$(realpath "${dir}/parent")
    _parents=("${dir}" "${_parents[@]}")
  done
}

# ============================================================================

# ----------------------------------------------------------------------------
make_target() {
  make_target="$1"

  if [[ ! -f "${lbrconfig}" ]] ; then
    echo "No config for layer ${layer} at ${lbrconfig}" >&2
    return 1
  fi

  merge_config
  run ${MAKE} "${make_args[@]}" defconfig \
    && post_config \
    && run ${MAKE} "${make_args[@]}" olddefconfig \
    && run ${MAKE} "${make_args[@]}" "${make_target}"
}

# ----------------------------------------------------------------------------
# Run the post-config.sh script in each BR2_EXTERNAL dir. Set BR2_CONFIG
# appropriately.
post_config() {
  IFS=: read -r -a ext_dirs <<<"${BR2_EXTERNAL}"
  for dir in "${ext_dirs[@]}"; do (
    if [[ -x "${dir}/post-config.sh" ]]; then
      message post-config "${dir}"
      BR2_CONFIG="${LBR_OUTPUT_DIR}/${LBR_LAYER}/.config"
      export BR2_CONFIG
      cd "${dir}" && run "${dir}/post-config.sh" "${dir}"
    fi
  ) done
}

# ============================================================================
# Linux kernel config upgrading
#
# ----------------------------------------------------------------------------
get_linux_br2_config() {
  if ! kconfig_y BR2_LINUX_KERNEL "${lbrconfig}"; then
    printf 'Linux kernel build not enabled in this layer\n' >&2
    exit 1
  fi

  if ! kconfig_y BR2_LINUX_KERNEL_CUSTOM_GIT "${lbrconfig}"; then
    printf 'You need to be using a custom git repository\n' >&2
    exit 1
  fi

  if ! kconfig_y BR2_LINUX_KERNEL_USE_CUSTOM_CONFIG "${lbrconfig}"; then
    printf 'You need to be using a custom config to update it\n' >&2
    exit 1
  fi

  kconfig_get BR2_LINUX_KERNEL_CUSTOM_REPO_URL "${lbrconfig}"
  kconfig_get BR2_LINUX_KERNEL_CUSTOM_REPO_VERSION "${lbrconfig}"
  kconfig_get BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE "${lbrconfig}"
  kconfig_get BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES "${lbrconfig}"
}

# ----------------------------------------------------------------------------
# next_linux_version <git_repository> <current_version>
# Find the next linux version from <git_repository> after <current_version>
# that is a linux git version tag. Output the full version tag.
# If there is no next minor version, the latest point release version for the
# current minor version is output.
# Returns true if a version was found, false if not.
next_linux_version() {
  # shellcheck disable=SC2016
  # We don't want to expand vars, but shellcheck thinks we do.
  find_next='
    $1"."$2 == last {if (vers) {print vers} else {print $0}; found=1; exit}
    $1"."$2 != seen {seen=$1"."$2; vers=$0}
    END {if (found) {exit 0}; exit 1}
  '
  local version
  if version=$(extract_major_minor "$2"); then
    git ls-remote --tags "$1" \
      | awk -F/ '/(\^\{\}$|-)/ {next} {print $3}' \
      | sort -Vr \
      | awk -F. -v last="v${version}" "${find_next}"
  else
    return 1
  fi
}

# ----------------------------------------------------------------------------
# extract_major_minor <version_tag>
# Extract the major.minor version from a linux version tag and output to
# stdout. Returns true if the version could be extracted, false if not.
extract_major_minor() {
  if ! [[ "$1" =~ v([0-9]+\.[0-9]+)\. ]]; then
    printf 'Cannot find v<major>.<minor> in kernel version %s\n' "$1" >&2
    return 1
  fi
  echo "${BASH_REMATCH[1]}"
  return 0
}

# ----------------------------------------------------------------------------
# uplift_linux_configs <current_version> <next_version>
# Uplift the linux config file and the linux config fragments from
# <current_version> to <next_version> and update the br2 layer defconfig
# fragment with the uplifted paths.
uplift_linux_configs() {
  local cur="$1" next="$2"

  # Uplift the (def)config file.
  local new_config
  new_config=$(uplift_linux_config "${cur}" "${next}" "${BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE}")
  kconfig_str_set BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE "${new_config}" "${lbrconfig}"

  # Uplift the config file if it exists and was not uplifted before.
  if ! [[ "${BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE}" =~ /"${cur}"/config$ ]]; then
    local dotconfig="${BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE%/*}/config"
    if [[ -f "$(envsubst <<<"${dotconfig}")" ]]; then
      # Leave the output of uplift_linux_config to echo back to the caller of us.
      uplift_linux_config "${cur}" "${next}" "${dotconfig}"
    fi
  fi

  # Uplift each config file fragment.
  local fragment
  local -a linux_fragments
  for fragment in ${BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES}; do
    linux_fragments+=( "$(uplift_linux_config "${cur}" "${next}" "${fragment}")" )
  done
  kconfig_str_set BR2_LINUX_KERNEL_CONFIG_FRAGMENT_FILES "${linux_fragments[*]}" "${lbrconfig}"
}

# ----------------------------------------------------------------------------
# uplift_linux_config <current_version> <next_version> <config_val>
# If <config_val> is in a directory named <current_version>, copy the file
# to a new directory named <next_version> and output the path to the new
# config file. Otherwise just echo the name of the config_file.
# Note, we need to expand $ refs in the config file name so we can copy the
# config file, but we output the uplifted setting value without performing
# the expansion.
uplift_linux_config() {
  local current_version="$1" next_version="$2" config_val="$3"
  if [[ "${config_val}" =~ ^(.*)/"${current_version}"/(.*)$ ]]; then
    local new_dir="${BASH_REMATCH[1]}/${next_version}"
    config_val="${new_dir}/${BASH_REMATCH[2]}"
    install -D "$(envsubst <<<"$3")" "$(envsubst <<<"${config_val}")"
    if "${OPT_linuxup_git}"; then
      git add "$(envsubst <<<"${config_val}")"
    fi
  fi
  echo "${config_val}"
}

# ============================================================================
# UTILITY

# ----------------------------------------------------------------------------
layer_has_build_function() {
  [[ "$(type -t "build_${1}")" = function ]]
}

# ----------------------------------------------------------------------------
known_target() {
  [[ "$(type -t "target_${1}")" = function ]]
}

# ----------------------------------------------------------------------------
target_has_options() {
  [[ "$(type -t "handle_${1}_option")" = function ]]
}

# ----------------------------------------------------------------------------
run() {
  echo "$@"
  "${dryrun}" || "$@"
}

# ----------------------------------------------------------------------------
message() {
  tput smso
  printf '>>> %s\n' "$*"
  tput rmso
}

# ============================================================================
# SETUP
# Functions to read the config and set up the environment that the rest of
# this script depends on

# ----------------------------------------------------------------------------
setup() {
  program_name=${0##*/}

  parse_args "$@"

  LBR_PROJECT_DIR="${project_dir}"
  LBR_BOARD_DIR="${LBR_PROJECT_DIR}/board/${board}"

  LBR_PROJECT="${project}"
  LBR_BOARD="${board}"
  LBR_LAYER="${layer}"

  load_config || return 1

  LBR_ROOT=${lbr_root:-${share_dir}}
  LBR_CORE_DIR="${LBR_ROOT}/core"

  LBR_OUTPUT_ROOT="${output_root:-${LBR_PROJECT_DIR}/output}"
  LBR_OUTPUT_DIR="${LBR_OUTPUT_ROOT}/${board}"
  LBR_IMAGE_DIR="${LBR_OUTPUT_DIR}"/images

  find_buildroot

  check_config || return 1

  # shellcheck source=/dev/null
  source "${LBR_ROOT}/kconfig.sh"

  lbrconfig="${LBR_BOARD_DIR}/config/${layer}"

  log_dir="${LBR_OUTPUT_DIR}"/logs

  export BR2_EXTERNAL="${LBR_CORE_DIR}:${LBR_PROJECT_DIR}"
  export BR2_DEFCONFIG="${LBR_OUTPUT_DIR}/${layer}/defconfig"
  make_args=(
    -C "${buildroot}"
    "O=${LBR_OUTPUT_DIR}/${layer}"
  )

  [[ "$V" == '1' ]] && make_args+=("V=1")

  make_output_dirs

  export LBR_ROOT LBR_PROJECT_DIR LBR_OUTPUT_ROOT LBR_OUTPUT_DIR \
    LBR_IMAGE_DIR LBR_BOARD_DIR LBR_PROJECT LBR_BOARD LBR_LAYER
}

# ----------------------------------------------------------------------------
parse_args() {
  # Normal usage is:
  #  lbr [options] <target> [target-options] <board> <config>
  # but we can infer the board from $PWD if appropriate.
  # If we are in a board dir, we don't require that args.
  # Use these CWD defaults if not explicitly given on the cmdline.
  project_dir="${PWD}"
  if [[ "${project_dir}" =~ (.*)/board/([^/]*)(/.*)? ]]; then
    project_dir="${BASH_REMATCH[1]}"
    board="${BASH_REMATCH[2]}"
  fi
  project="${dir##*/}"

  parse_options 'global' "$@"
  shift $((OPTIND-1))

  (($# > 0)) || usage 1 >&2

  target="$1"; shift
  parse_options "${target}" "$@"
  shift $((OPTIND-1))

  (( $# == 2 )) && { board="$1"; shift; }
  layer="$1"

  [[ -n "${board}" ]] || { printf 'Missing board\n'; usage 1 >&2; }
  [[ -n "${layer}" ]] || { printf 'Missing layer\n'; usage 1 >&2; }
}

# ----------------------------------------------------------------------------
parse_options() {
  target="$1"; shift
  OPTIND=1
  while getopts ":${OPTIONS[${target}]-}" opt; do
    handle_getopt_errors "${target}" "${opt}"
    handle_option "${target}" "${opt}"
  done
}

# ----------------------------------------------------------------------------
handle_option() {
  if target_has_options "$1"; then
    "handle_${target}_option" "${opt}"
  fi
}

# ----------------------------------------------------------------------------
handle_global_option() {
  case "$1" in
    h)
      usage 0
      ;;
    n)
      dryrun=true
      ;;
  esac
}

# ----------------------------------------------------------------------------
handle_linuxup_option() {
  case "$1" in
    g)
      OPT_linuxup_git=true
      ;;
    o)
      OPT_linuxup_oldconfig=true
      ;;
  esac
}

# ----------------------------------------------------------------------------
handle_getopt_errors() {
  case "$2" in
    \?)
      printf 'Invalid %s option: -%s\n\n' "$1" "${OPTARG}" >&2
      usage 1 >&2
      ;;
    :)
      printf '%s option -%s requires an argument\n\n' "$1" "${OPTARG}" >&2
      usage 1 >&2
      ;;
  esac
}

# ----------------------------------------------------------------------------
find_buildroot() {
  if [[ -z "${buildroot-}" ]]; then
    if [[ -e "${LBR_PROJECT_DIR}/buildroot" ]]; then
      buildroot="${LBR_PROJECT_DIR}/buildroot"
    elif [[ -e "${LBR_ROOT}"/buildroot ]]; then
      buildroot="${LBR_ROOT}/buildroot"
    fi
  fi
}

# ----------------------------------------------------------------------------
load_config() {
  local -a xdg
  IFS=: read -r -a xdg <<< "${XDG_CONFIG_DIRS:-/etc/xdg}"
  local -a search=(
  "${xdg[@]/%//lbr}"
  "${XDG_CONFIG_HOME:-$HOME/.config}/lbr"
  "${LBR_PROJECT_DIR}/lbr.conf")
  for path in "${search[@]}" ; do
    if [[ -f "$path" ]] ; then
      # shellcheck disable=SC1090
      source "$path"
    fi
  done

  return 0
}

# ----------------------------------------------------------------------------
check_config() {
  if [[ -z "${buildroot}" ]] ; then
    echo "'buildroot' not set in config. Where is buildroot?" >&2
    return 1
  fi
  if ! [[ -d "${LBR_BOARD_DIR}" ]] ; then
    echo "board dir missing: ${LBR_BOARD_DIR}" >&2
    return 1
  fi
  return 0
}

# ----------------------------------------------------------------------------
make_output_dirs() {
  for dir in "${LBR_OUTPUT_DIR}" "${LBR_IMAGE_DIR}" "${log_dir}" \
    "${LBR_OUTPUT_DIR}/${layer}"; do
  if [[ ! -d "${dir}" ]]; then
    if [[ ! -e "${dir}" ]]; then
      run mkdir -p "${dir}"
    else
      echo "Cannot mkdir ${dir}" >&2
      exit 1
    fi
  fi
done
}

# ----------------------------------------------------------------------------
[[ "$(caller)" == 0\ * ]] && main "$@"
